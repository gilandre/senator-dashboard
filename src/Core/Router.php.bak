<?php

namespace App\Core;

class Router
{
    private array $routes = [];
    private string $currentRoute = '';
    private array $params = [];

    public function get(string $path, array|string $controller): void
    {
        $this->routes['GET'][$path] = $controller;
    }

    public function post(string $path, array|string $controller): void
    {
        $this->routes['POST'][$path] = $controller;
    }

    public function dispatch(): void
    {
        $method = $_SERVER['REQUEST_METHOD'];
        $path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);

        if (!isset($this->routes[$method][$path])) {
            http_response_code(404);
            echo '404 Not Found';
            return;
        }

        $controller = $this->routes[$method][$path];

        if (is_array($controller)) {
            [$class, $method] = $controller;
            if (!class_exists($class)) {
                throw new \RuntimeException("Controller class {$class} not found");
            }
            $instance = new $class();
            if (!method_exists($instance, $method)) {
                throw new \RuntimeException("Method {$method} not found in controller {$class}");
            }
            $instance->$method();
        } else {
            if (strpos($controller, '@') === false) {
                throw new \RuntimeException("Invalid controller format. Expected 'Controller@method'");
            }
            [$class, $method] = explode('@', $controller);
            $class = "App\\Controllers\\{$class}";
            if (!class_exists($class)) {
                throw new \RuntimeException("Controller class {$class} not found");
            }
            $instance = new $class();
            if (!method_exists($instance, $method)) {
                throw new \RuntimeException("Method {$method} not found in controller {$class}");
            }
            $instance->$method();
        }
    }

    private function getCurrentUrl(): string
    {
        $url = $_SERVER['REQUEST_URI'];
        $url = strtok($url, '?');
        return trim($url, '/');
    }

    private function matchRoute(string $route, string $url): bool
    {
        $route = trim($route, '/');
        $routeParts = explode('/', $route);
        $urlParts = explode('/', $url);

        if (count($routeParts) !== count($urlParts)) {
            return false;
        }

        $this->params = [];

        foreach ($routeParts as $key => $part) {
            if (preg_match('/^{([a-zA-Z0-9_]+)}$/', $part, $matches)) {
                $this->params[$matches[1]] = $urlParts[$key];
            } elseif ($part !== $urlParts[$key]) {
                return false;
            }
        }

        return true;
    }

    private function callController(string $controller): void
    {
        list($controllerName, $method) = explode('@', $controller);
        $controllerClass = "App\\Controllers\\{$controllerName}";
        
        if (!class_exists($controllerClass)) {
            $this->notFound();
            return;
        }

        $controllerInstance = new $controllerClass();
        
        if (!method_exists($controllerInstance, $method)) {
            $this->notFound();
            return;
        }

        call_user_func_array([$controllerInstance, $method], $this->params);
    }

    private function notFound(): void
    {
        header("HTTP/1.0 404 Not Found");
        echo "404 Not Found";
        exit;
    }

    public function init(): void
    {
        // Routes d'authentification
        $this->get('/login', ['App\\Controllers\\AuthController', 'showLoginForm']);
        $this->post('/login', ['App\\Controllers\\AuthController', 'login']);
        $this->get('/logout', ['App\\Controllers\\AuthController', 'logout']);
        $this->get('/forgot-password', ['App\\Controllers\\AuthController', 'showForgotPasswordForm']);
        $this->post('/forgot-password', ['App\\Controllers\\AuthController', 'sendPasswordResetLink']);
        $this->get('/reset-password', ['App\\Controllers\\AuthController', 'showResetPasswordForm']);
        $this->post('/reset-password', ['App\\Controllers\\AuthController', 'resetPassword']);

        // Routes pour le tableau de bord
        $this->get('/', ['App\\Controllers\\DashboardController', 'index']);
        $this->get('/dashboard', ['App\\Controllers\\DashboardController', 'index']);
        $this->get('/dashboard/data', ['App\\Controllers\\DashboardController', 'getData']);

        // Routes pour l'import
        $this->get('/import', ['App\\Controllers\\ImportController', 'index']);
        $this->post('/import', ['App\\Controllers\\ImportController', 'upload']);

        // Routes pour les rapports
        $this->get('/reports', ['App\\Controllers\\ReportController', 'index']);
    }
} 