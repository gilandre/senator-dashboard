<?php

namespace App\Controllers;

use App\Core\Auth;
use App\Models\User;
use App\Services\EmailService;

class ProfileController extends Controller
{
    private User $userModel;
    private EmailService $emailService;
    private Auth $auth;

    public function __construct()
    {
        parent::__construct();
        $this->userModel = new User();
        $this->emailService = new EmailService();
        $this->auth = new Auth();
    }

    public function index(): void
    {
        if (!$this->auth->isLoggedIn()) {
            $this->redirect('/login');
        }

        $userId = $this->auth->getUserId();
        $user = $this->userModel->findById($userId);
        
        if (!$user) {
            $this->setError('Utilisateur non trouvé');
            $this->redirect('/dashboard');
        }
        
        // Convertir l'objet User en tableau pour la vue
        $userArray = [
            'id' => $user->getId(),
            'username' => $user->getUsername(),
            'email' => $user->getEmail(),
            'role' => $user->getRole(),
            'is_active' => $user->getIsActive()
        ];
        
        $this->view('profile/index', [
            'user' => $userArray,
            'currentPage' => 'profile',
            'pageTitle' => 'Mon Profil'
        ]);
    }

    public function update(): void
    {
        if (!$this->auth->isLoggedIn()) {
            $this->redirect('/login');
        }

        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            $this->redirect('/profile');
        }

        $userId = $this->auth->getUserId();
        $user = $this->userModel->findById($userId);
        
        if (!$user) {
            $this->setError('Utilisateur non trouvé');
            $this->redirect('/dashboard');
        }
        
        $email = $_POST['email'] ?? '';
        $currentPassword = $_POST['current_password'] ?? '';
        $newPassword = $_POST['new_password'] ?? '';
        $confirmPassword = $_POST['confirm_password'] ?? '';

        try {
            // Vérifier le mot de passe actuel
            if (!$this->userModel->verifyPassword($currentPassword, $user->getPassword())) {
                throw new \Exception('Le mot de passe actuel est incorrect.');
            }

            // Mettre à jour l'email si changé
            if ($email !== $user->getEmail()) {
                // Créer un tableau avec les données à mettre à jour
                $userData = [
                    'email' => $email
                ];
                $this->userModel->update($userId, $userData);
                $_SESSION['email'] = $email;
            }

            // Mettre à jour le mot de passe si fourni
            if (!empty($newPassword)) {
                if ($newPassword !== $confirmPassword) {
                    throw new \Exception('Les nouveaux mots de passe ne correspondent pas.');
                }
                
                $hashedPassword = $this->userModel->hashPassword($newPassword);
                $this->userModel->changePassword($userId, $hashedPassword);
            }

            $this->setSuccess('Votre profil a été mis à jour avec succès.');
            $this->redirect('/profile');
        } catch (\Exception $e) {
            $this->setError($e->getMessage());
            $this->redirect('/profile');
        }
    }
    
    public function changePassword(): void
    {
        if (!$this->auth->isLoggedIn()) {
            $this->redirect('/login');
        }

        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            $this->redirect('/profile');
        }

        $userId = $this->auth->getUserId();
        $user = $this->userModel->findById($userId);
        
        if (!$user) {
            $this->setError('Utilisateur non trouvé');
            $this->redirect('/dashboard');
        }
        
        $currentPassword = $_POST['current_password'] ?? '';
        $newPassword = $_POST['new_password'] ?? '';
        $confirmPassword = $_POST['confirm_password'] ?? '';

        try {
            // Vérifier le mot de passe actuel
            if (!$this->userModel->verifyPassword($currentPassword, $user->getPassword())) {
                throw new \Exception('Le mot de passe actuel est incorrect.');
            }

            if ($newPassword !== $confirmPassword) {
                throw new \Exception('Les nouveaux mots de passe ne correspondent pas.');
            }
            
            if (empty($newPassword)) {
                throw new \Exception('Le nouveau mot de passe ne peut pas être vide.');
            }

            $hashedPassword = $this->userModel->hashPassword($newPassword);
            $this->userModel->changePassword($userId, $hashedPassword);
            
            $this->setSuccess('Votre mot de passe a été modifié avec succès.');
            $this->redirect('/profile');
        } catch (\Exception $e) {
            $this->setError($e->getMessage());
            $this->redirect('/profile');
        }
    }
} 