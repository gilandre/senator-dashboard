// Script pour nettoyer les entr√©es dupliqu√©es dans la table reports
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function cleanDuplicateReports() {
  console.log('üßπ Nettoyage des rapports dupliqu√©s...');
  
  try {
    // 1. R√©cup√©rer tous les rapports
    const allReports = await prisma.reports.findMany({
      orderBy: { id: 'asc' }
    });
    
    console.log(`üìä Nombre total de rapports: ${allReports.length}`);
    
    // 2. Identifier les groupes de rapports ayant le m√™me titre et type
    const reportGroups = {};
    
    allReports.forEach(report => {
      const key = `${report.title}_${report.report_type}`;
      if (!reportGroups[key]) {
        reportGroups[key] = [];
      }
      reportGroups[key].push(report);
    });
    
    // 3. Filtrer pour ne garder que les groupes avec des doublons
    const duplicateGroups = Object.entries(reportGroups)
      .filter(([_, reports]) => reports.length > 1);
    
    console.log(`üîç Nombre de groupes avec doublons: ${duplicateGroups.length}`);
    
    if (duplicateGroups.length === 0) {
      console.log('‚úÖ Aucun doublon trouv√©, rien √† nettoyer');
      return;
    }
    
    // 4. Pour chaque groupe de doublons, garder le premier et supprimer les autres
    let totalDuplicatesRemoved = 0;
    
    for (const [key, reports] of duplicateGroups) {
      console.log(`\nüîÑ Traitement des doublons pour: ${key}`);
      console.log(`   Reports concern√©s: ${reports.map(r => r.id).join(', ')}`);
      
      // Garder le premier rapport (le plus ancien bas√© sur l'ID)
      const [keepReport, ...duplicatesToRemove] = reports;
      
      console.log(`   ‚úÖ Conservation du rapport ID: ${keepReport.id}`);
      console.log(`   üóëÔ∏è Suppression des rapports IDs: ${duplicatesToRemove.map(r => r.id).join(', ')}`);
      
      if (duplicatesToRemove.length > 0) {
        // Transaction pour s'assurer que toutes les op√©rations r√©ussissent ou √©chouent ensemble
        await prisma.$transaction(async (tx) => {
          // Pour chaque rapport √† supprimer
          for (const dupReport of duplicatesToRemove) {
            // Mettre √† jour les r√©f√©rences dans report_history
            await tx.report_history.updateMany({
              where: { report_id: dupReport.id },
              data: { report_id: keepReport.id }
            });
            
            // Mettre √† jour les r√©f√©rences dans report_templates
            await tx.report_templates.updateMany({
              where: { report_id: dupReport.id },
              data: { report_id: keepReport.id }
            });
            
            // Mettre √† jour les r√©f√©rences dans report_schedule
            await tx.report_schedule.updateMany({
              where: { report_id: dupReport.id },
              data: { report_id: keepReport.id }
            });
            
            // Supprimer le rapport dupliqu√©
            await tx.reports.delete({
              where: { id: dupReport.id }
            });
          }
        });
        
        totalDuplicatesRemoved += duplicatesToRemove.length;
      }
    }
    
    console.log(`\nüéâ Nettoyage termin√© avec succ√®s!`);
    console.log(`   üìä Rapports dupliqu√©s supprim√©s: ${totalDuplicatesRemoved}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage des rapports dupliqu√©s:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter la fonction de nettoyage
cleanDuplicateReports(); 